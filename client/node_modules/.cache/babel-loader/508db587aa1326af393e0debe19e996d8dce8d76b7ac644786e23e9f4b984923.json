{"ast":null,"code":"var _jsxFileName = \"/Users/alisecervantes/Desktop/Milestone-3-/client/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Task from \"./task\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      // Simulated mock data (replace with your own mock data)\n      const mockData = [{\n        id: 1,\n        title: \"Task 1\",\n        description: \"Description for Task 1\"\n      }, {\n        id: 2,\n        title: \"Task 2\",\n        description: \"Description for Task 2\"\n      }, {\n        id: 3,\n        title: \"Task 3\",\n        description: \"Description for Task 3\"\n      }];\n\n      // Simulate a delay to mimic an API request\n      setTimeout(() => {\n        setTasks(mockData);\n        setIsLoading(false);\n      }, 1000); // Adjust the delay as needed\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n    }\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading tasks...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error fetching tasks: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.length > 0 ? tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n      task: task\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 29\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"ojYhooNsno+ZHjjlGzjiqOG+IPU=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","Task","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","isLoading","setIsLoading","error","setError","mockData","id","title","description","setTimeout","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","task","_c","$RefreshReg$"],"sources":["/Users/alisecervantes/Desktop/Milestone-3-/client/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Task from \"./task\";\n\nconst TaskList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    try {\n      // Simulated mock data (replace with your own mock data)\n      const mockData = [\n        { id: 1, title: \"Task 1\", description: \"Description for Task 1\" },\n        { id: 2, title: \"Task 2\", description: \"Description for Task 2\" },\n        { id: 3, title: \"Task 3\", description: \"Description for Task 3\" },\n      ];\n\n      // Simulate a delay to mimic an API request\n      setTimeout(() => {\n        setTasks(mockData);\n        setIsLoading(false);\n      }, 1000); // Adjust the delay as needed\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n    }\n  }, []);\n\n  if (isLoading) {\n    return <p>Loading tasks...</p>;\n  }\n\n  if (error) {\n    return <p>Error fetching tasks: {error}</p>;\n  }\n\n  return (\n    <div>\n      {tasks.length > 0 ? (\n        tasks.map((task) => <Task key={task.id} task={task} />)\n      ) : (\n        <p>No tasks available</p>\n      )}\n    </div>\n  );\n};\n\nexport default TaskList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdS,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMG,QAAQ,GAAG,CACf;QAAEC,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAyB,CAAC,EACjE;QAAEF,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAyB,CAAC,EACjE;QAAEF,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAyB,CAAC,CAClE;;MAED;MACAC,UAAU,CAAC,MAAM;QACfT,QAAQ,CAACK,QAAQ,CAAC;QAClBH,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZN,QAAQ,CAACM,GAAG,CAACC,OAAO,CAAC;MACrBT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,SAAS,EAAE;IACb,oBAAOL,OAAA;MAAAgB,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAChC;EAEA,IAAIb,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAgB,QAAA,GAAG,wBAAsB,EAACT,KAAK;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC7C;EAEA,oBACEpB,OAAA;IAAAgB,QAAA,EACGb,KAAK,CAACkB,MAAM,GAAG,CAAC,GACflB,KAAK,CAACmB,GAAG,CAAEC,IAAI,iBAAKvB,OAAA,CAACF,IAAI;MAAeyB,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACb,EAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC,gBAEvDpB,OAAA;MAAAgB,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACzB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClB,EAAA,CA5CID,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AA8Cd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}