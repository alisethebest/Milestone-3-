{"ast":null,"code":"var _jsxFileName = \"/Users/alisecervantes/Desktop/Milestone-3-/client/src/components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Task from \"./task\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setIsLoading(true);\n      setError(null);\n      // Make sure you retrieve the user ID correctly from localStorage or context/state management\n      const userId = localStorage.getItem(\"userId\");\n      try {\n        const response = await fetch(`/api/tasks/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`Error fetching tasks: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setTasks(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (userId) {\n      fetchTasks();\n    }\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading tasks...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error fetching tasks: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.length > 0 ? tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n      task: task\n    }, task._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 29\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"ojYhooNsno+ZHjjlGzjiqOG+IPU=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","Task","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","isLoading","setIsLoading","error","setError","fetchTasks","userId","localStorage","getItem","response","fetch","ok","Error","statusText","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","task","_id","_c","$RefreshReg$"],"sources":["/Users/alisecervantes/Desktop/Milestone-3-/client/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Task from \"./task\";\n\nconst TaskList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setIsLoading(true);\n      setError(null);\n      // Make sure you retrieve the user ID correctly from localStorage or context/state management\n      const userId = localStorage.getItem(\"userId\");\n\n      try {\n        const response = await fetch(`/api/tasks/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`Error fetching tasks: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setTasks(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (userId) {\n      fetchTasks();\n    }\n  }, []);\n\n  if (isLoading) {\n    return <p>Loading tasks...</p>;\n  }\n\n  if (error) {\n    return <p>Error fetching tasks: {error}</p>;\n  }\n\n  return (\n    <div>\n      {tasks.length > 0 ? (\n        tasks.map((task) => <Task key={task._id} task={task} />)\n      ) : (\n        <p>No tasks available</p>\n      )}\n    </div>\n  );\n};\n\nexport default TaskList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7BH,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MACd;MACA,MAAME,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAE7C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mBAAkBJ,MAAO,EAAC,CAAC;QACzD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,yBAAwBH,QAAQ,CAACI,UAAW,EAAC,CAAC;QACjE;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCf,QAAQ,CAACc,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZZ,QAAQ,CAACY,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRf,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED,IAAII,MAAM,EAAE;MACVD,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,SAAS,EAAE;IACb,oBAAOL,OAAA;MAAAsB,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAChC;EAEA,IAAInB,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAsB,QAAA,GAAG,wBAAsB,EAACf,KAAK;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC7C;EAEA,oBACE1B,OAAA;IAAAsB,QAAA,EACGnB,KAAK,CAACwB,MAAM,GAAG,CAAC,GACfxB,KAAK,CAACyB,GAAG,CAAEC,IAAI,iBAAK7B,OAAA,CAACF,IAAI;MAAgB+B,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC,gBAExD1B,OAAA;MAAAsB,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACzB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxB,EAAA,CAhDID,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAkDd,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}